#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <curl/curl.h>

typedef struct _Memory
{
    char *response;
    size_t size;
} Memory;

static size_t write_callback(void *data, size_t size, size_t nmemb, void *userp)
{
    /* to jest rzeczywista liczba bajtów przekazanych przez curl */
    size_t realsize = size * nmemb;

    /* jawnie konwertujemy (void*) na naszą strukturę, bo wiemy, że będziemy ją tutaj otrzymywać */
    Memory *mem = (Memory *) userp;

    char *ptr = NULL;

    /* Sprawdzamy czy pierwszy raz wywołujemy funkcję i trzeba zaalokować pamięć po raz pierwszy,
    czy trzeba zrobić reallokację (która kopiuje automatycznie starą zawartość w nowe miejsce) */
    if (mem->response != NULL)
        ptr = realloc(mem->response, mem->size + realsize + 1);
    else
        ptr = malloc(mem->size + realsize + 1);

    if (ptr == NULL)
        return 0; /* brak pamięci! */

    /* teraz zapamiętujemy nowy wskaźnik i doklejamy na końcu dane przekazane przez curl w 
       obszarze pamięci wskazywanym przez data */
    mem->response = ptr;
    memcpy(&(mem->response[mem->size]), data, realsize);
    mem->size += realsize;
    mem->response[mem->size] = 0; // to na końcu dodajemy bo to w końcu string, i zawsze powinien się skończyć!

    return realsize;
}

int make_request(char *url){
    CURL *curl;
    CURLcode res;
    Memory chunk;
    chunk.size = 0;
    chunk.response = NULL;
    int status;

    curl = curl_easy_init();
    if (curl)
    {
        curl_easy_setopt(curl, CURLOPT_URL, url);
        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
        curl_easy_setopt(curl, CURLOPT_HEADER, 1L);

        /* to jest funkcja 'callback', która będzie wywołana przez curl gdy odczyta on kawałek danych
       ta funkcja musi mieć wywołanie zgodne z wymaganiami, które możesz sprawdzić tutaj:
       https://curl.se/libcurl/c/CURLOPT_WRITEFUNCTION.html */
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);

        /* to jest adress struktury, który będzie przekazywany do naszej funkcji 'callback',
       do tej struktury nasz funkcja 'callback' będzie dopisywać wynik */
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *)&chunk);

        /* Wykonaj zapytanie 'synchronicznie', to znaczy następna linijka kodu nie wykona się
       dopóki nie nadejdzie odpowiedź z serwera. */
        res = curl_easy_perform(curl);

        /* Sprawdzamy czy wystapił jakis błąd? */
        if (res != CURLE_OK){
            fprintf(stderr, "Błąd! curl_easy_perform() niepowodzenie: %s\n", curl_easy_strerror(res));
            status=0;
        }
        else
        {
            printf("%s", chunk.response);
            status=1;
        }

        /* zawsze po sobie sprzątaj */
        free(chunk.response);
        curl_easy_cleanup(curl);

    }
    return status;
}

int info(char *token) {
    char *url; 
    char *url1="http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/info/";
    int status;
    url = (char*) malloc((sizeof(char) * strlen(url1)) + (sizeof(char) *strlen((token) + 1)));
    strcpy(url,url1);
    strncat(url,token,9);
    printf("%s\n",url);
    printf("Wyświetlam informacje o świecie:\n\n");
    status=make_request(url);
    return status;
}

int move(char *token) {
    char *url; 
    char *url1="http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/move/";
    int status;
    url = (char*) malloc((sizeof(char) * strlen(url1)) + (sizeof(char) *strlen((token) + 1)));
    strcpy(url,url1);
    strncat(url,token,9);
    printf("%s\n",url);
    printf("Wykonuję ruch.\n\n");
    status=make_request(url);
    return status;
}

int rotate(char *token, char *direction){
    char *url; 
    char *url1="http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/rotate/";
    int status;
    url = (char*) malloc((sizeof(char) * strlen(url1)) + (sizeof(char) * strlen((token) + 1)) + (sizeof(char) * strlen((direction) + 1)));
    strcpy(url,url1);
    strncat(url,token,9);
    strncat(url, "/", 1);
    strncat(url,direction,5);
    printf("%s\n",url);
    if(strcmp(direction, "left")==0)
        printf("Obracam w lewo.\n\n");
    if(strcmp(direction, "right")==0)
        printf("Obracam w prawo.\n\n");
    status=make_request(url);
    return status;
}

int explore(char *token){
    char *url; 
    char *url1="http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/explore/";
    int status;
    url = (char*) malloc((sizeof(char) * strlen(url1)) + (sizeof(char) *strlen((token) + 1)));
    strcpy(url,url1);
    strncat(url,token,9);
    printf("%s\n",url);
    printf("Eksploruję.\n\n");
    status=make_request(url);
    return status;
}

int main(int argc, char **argv)
{
    /* Program obługuje się poprzez podanie tokena świata jako pierwszy argument linii komend.
    Następnie jeśli nie ma kolejnych argumentow - program wyświetla informacje o świecie.
    Jeśli następne argumenty występują, w zaleznosci od nich program wykonuje dane polecenia:
    ("M" - ruch, "Rleft" - obrot w lewo, "Rright" - obrot w prawo, "E" - eksploracja) */ 
    char *url;
    char *token;
    int status;
    char *s1="M";
    char *s21="Rleft";
    char *s22="Rright";
    char *s3="E";

    token=argv[1];

    if(argc<3){
        status=info(token);
        printf("\nStatus zapytania: %d\n",status);
    }
    else
    {
        int i;
        for(i=2;i<argc;i++){
            if(strcmp(argv[i],s1)==0){
                status=move(token);
                printf("\nStatus zapytania: %d\n",status);
            }
            else if(strcmp(argv[i],s21)==0){
                status=rotate(token,"left");
                printf("\nStatus zapytania: %d\n",status);
            }
            else if(strcmp(argv[i],s22)==0){
                status=rotate(token,"right");
                printf("\nStatus zapytania: %d\n",status);
            }
            else if(strcmp(argv[i],s3)==0){
                status=explore(token);
                printf("\nStatus zapytania: %d\n",status);
            }
            else
            {
                printf("\nBłąd: nieznana komenda!\n");
                exit(-1);
            }
            
        }
    }
    
    return 0;
}



*********************************
Wyniki sesji:



MacBook-Air:zad9 janek$ ./a.out qwerty_27
http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/info/qwerty_27
Wyświetlam informacje o świecie:

HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 223
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Fri, 18 Dec 2020 15:47:10 GMT

{"status": "Success", "payload": {"name": "First world 27", "current_x": 1, "current_y": 1, "current_session": "20ac75fa-c0c0-4b52-b980-87a6ff3fc4da", "direction": "E", "step": 2, "field_type": "grass", "field_bonus": ""}}

Status zapytania: 1
MacBook-Air:zad9 janek$ ./a.out qwerty_27 M Rleft M Rright E Rright
http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/move/qwerty_27
Wykonuję ruch.

HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 223
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Fri, 18 Dec 2020 15:47:30 GMT

{"status": "Success", "payload": {"name": "First world 27", "current_x": 2, "current_y": 1, "current_session": "20ac75fa-c0c0-4b52-b980-87a6ff3fc4da", "direction": "E", "step": 3, "field_type": "grass", "field_bonus": ""}}

Status zapytania: 1
http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/rotate/qwerty_27/left
Obracam w lewo.

HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 223
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Fri, 18 Dec 2020 15:47:30 GMT

{"status": "Success", "payload": {"name": "First world 27", "current_x": 2, "current_y": 1, "current_session": "20ac75fa-c0c0-4b52-b980-87a6ff3fc4da", "direction": "N", "step": 4, "field_type": "grass", "field_bonus": ""}}

Status zapytania: 1
http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/move/qwerty_27
Wykonuję ruch.

HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 222
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Fri, 18 Dec 2020 15:47:30 GMT

{"status": "Success", "payload": {"name": "First world 27", "current_x": 2, "current_y": 2, "current_session": "20ac75fa-c0c0-4b52-b980-87a6ff3fc4da", "direction": "N", "step": 7, "field_type": "sand", "field_bonus": ""}}

Status zapytania: 1
http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/rotate/qwerty_27/right
Obracam w prawo.

HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 222
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Fri, 18 Dec 2020 15:47:30 GMT

{"status": "Success", "payload": {"name": "First world 27", "current_x": 2, "current_y": 2, "current_session": "20ac75fa-c0c0-4b52-b980-87a6ff3fc4da", "direction": "E", "step": 8, "field_type": "sand", "field_bonus": ""}}

Status zapytania: 1
http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/explore/qwerty_27
Eksploruję.

HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 151
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Fri, 18 Dec 2020 15:47:30 GMT

{"status": "Success", "payload": {"fields": [{"x": 3, "y": 3, "type": "wall"}, {"x": 3, "y": 2, "type": "grass"}, {"x": 3, "y": 1, "type": "grass"}]}}

Status zapytania: 1
http://edi.iem.pw.edu.pl:30000/worlds/api/v1/worlds/rotate/qwerty_27/right
Obracam w prawo.

HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 223
Access-Control-Allow-Origin: *
Server: Werkzeug/1.0.1 Python/3.6.9
Date: Fri, 18 Dec 2020 15:47:30 GMT

{"status": "Success", "payload": {"name": "First world 27", "current_x": 2, "current_y": 2, "current_session": "20ac75fa-c0c0-4b52-b980-87a6ff3fc4da", "direction": "S", "step": 10, "field_type": "sand", "field_bonus": ""}}

Status zapytania: 1
